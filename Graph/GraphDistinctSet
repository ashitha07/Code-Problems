/******************************************************************************
This program depicts Quick Union /Quick find/ Union by Rank of root for disjoint sets
*******************************************************************************/

#include <iostream>
#include <vector>

using namespace std;
class quickFind{
    private:
        vector<int> root;
    public:
        quickFind(int sz){
            root.resize(sz);
            for(int i=0;i<sz;i++){
                root[i]=i;
            }
        }
        bool connected(int x,int y){
            return find(x)==find(y);
        }
        void unionSet(int x,int y){
            if(root[x]!=root[y]){
                int prevRoot = root[y];
                root[y]=root[x];
                for(int i=0;i<root.size();i++){
                    if(prevRoot==root[i]){
                        root[i]=root[x];
                    }
                }
            }
        }
        int find(int x){
            return root[x];
        }
};
class quickUnion{
    private:
        vector<int> root;
    public:
        quickUnion(int sz){
            root.resize(sz);
            for(int i=0;i<sz;i++){
                root[i]=i;
            }
        }
        int find(int x){
            int i = x;
            while(root[i]!=i){
                i=root[i];
            }
            return i;
        }
        void unionSet(int x,int y){
            int rootX = find(x);
            int rootY = find(y);
            if(rootX!=rootY){
                root[rootY] = rootX;
            }
        }
        bool connected(int x,int y){
            return find(x)==find(y);
        }
    
};
//optimised version of quick union
class unionByRank{
    private:
        vector<int> root;
        vector<int> rank;
    public:
        unionByRank(int sz){
            root.resize(sz);
            rank.resize(sz,1);
            for(int i =0;i<sz;i++){
                root[i]=i;
            }
        }
        int find(int x){
            while(root[x]!=x){
                x = root[x];
            }
            return x;
        }
        void unionSet(int x,int y){
            int rootX = find(x);
            int rootY = find(y);
            
            if(rootX!=rootY){
                if(rank[rootX]>rank[rootY]){
                    root[rootY] = rootX;
                }else if(rank[rootX]<rank[rootY]){
                    root[rootX]=rootY;
                }else {
                    root[rootY] = rootX;
                    rank[rootX]+=1;
                }
            }
        }
        bool connected(int x, int y){
            return find(x)==find(y);
        }
    
};
int main()
{    
    cout<<"********Quick Find**************"<<endl;
    /*Quick Find */
    quickFind uf(10);
    // 1-2-5-6-7 3-8-9 4
    uf.unionSet(1, 2);
    uf.unionSet(2, 5);
    uf.unionSet(5, 6);
    uf.unionSet(6, 7);
    uf.unionSet(3, 8);
    uf.unionSet(8, 9);
    cout << uf.connected(1, 5) << endl;  // true
    cout << uf.connected(5, 7) << endl;  // true
    cout << uf.connected(4, 9) << endl;  // false
    uf.unionSet(9, 4);
    cout << uf.connected(4, 9) << endl;  // true

    cout<<"******** Quick Union **************"<<endl;
    /*Quick Union */
    quickUnion uf1(10);
    // 1-2-5-6-7 3-8-9 4
    uf1.unionSet(1, 2);
    uf1.unionSet(2, 5);
    uf1.unionSet(5, 6);
    uf1.unionSet(6, 7);
    uf1.unionSet(3, 8);
    uf1.unionSet(8, 9);
    cout << uf1.connected(1, 5) << endl;  // true
    cout << uf1.connected(5, 7) << endl;  // true
    cout << uf1.connected(7, 3) << endl;  // false
    uf1.unionSet(7, 3);
    cout << uf1.connected(7, 3) << endl;  // true
    
    cout<<"********Union by Rank**************"<<endl;
    /*Union by rank */
    unionByRank uf2(10);
    // 1-2-5-6-7 3-8-9 4
    uf2.unionSet(1, 2);
    uf2.unionSet(2, 5);
    uf2.unionSet(5, 6);
    uf2.unionSet(6, 7);
    uf2.unionSet(3, 8);
    uf2.unionSet(8, 9);
    cout << uf2.connected(1, 5) << endl;  // true
    cout << uf2.connected(5, 7) << endl;  // true
    cout << uf2.connected(7, 3) << endl;  // false
    uf2.unionSet(7, 3);
    cout << uf2.connected(7, 3) << endl;  // true
    return 0;
}
